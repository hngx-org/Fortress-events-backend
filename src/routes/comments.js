const express = require("express");
const router = express.Router();
const multer = require("multer");
const path = require("path");
const {
  sendSuccessfulResponse,
  sendErrorResponse,
} = require("../utils/constants/response");
const { Comment, Image } = require("../model"); // Remove CommentImage import

// Set up multer storage
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    // Specify the destination folder where uploaded images will be saved
    cb(null, "uploads/");
  },
  filename: (req, file, cb) => {
    // Generate a unique filename for the image (e.g., using uuid)
    const uniqueFilename = `${Date.now()}-${Math.round(
      Math.random() * 1e9
    )}${path.extname(file.originalname)}`;
    cb(null, uniqueFilename);
  },
});

// Create multer instance
const upload = multer({ storage });

// POST /api/comments/:commentId/images
router.post("/:commentId/images", upload.single("image"), async (req, res) => {
  const commentId = req.params.commentId;
  const imageUrl = req.file.filename; // The filename generated by multer

  try {
    // Create a new image record in the 'images' table
    const newImage = await Image.create({ url: imageUrl });

    // Update the comment to associate it with the new image
    const comment = await Comment.findByPk(commentId);
    if (!comment) {
      return sendErrorResponse(res, 404, "Comment not found");
    }

    comment.imageUrl = imageUrl;
    await comment.save();

    // Send a successful response
    sendSuccessfulResponse(res, 201, "Image added to comment successfully");
  } catch (error) {
    console.error("Error adding image to comment:", error);

    if (error.name === "SequelizeUniqueConstraintError") {
      // Handle unique constraint violation error (e.g., duplicate image)
      sendErrorResponse(
        res,
        400,
        "Image already exists for this comment. Duplicate images are not allowed."
      );
    } else {
      // Handle other errors
      console.error("Error adding image to comment:", error);
      sendErrorResponse(res, 500, "Error adding image to comment", error);
    }
  }
});

// GET /api/comments/:commentId/images
router.get("/:commentId/images", async (req, res) => {
  const commentId = req.params.commentId;

  try {
    // Find the comment by ID
    const comment = await Comment.findByPk(commentId);
    if (!comment) {
      return sendErrorResponse(res, 404, "Comment not found");
    }

    // Send the image URL associated with the comment
    sendSuccessfulResponse(res, 200, comment.imageUrl);
  } catch (error) {
    console.error("Error retrieving image for comment:", error);

    // Send an error response
    sendErrorResponse(res, 500, "Error retrieving image for comment");
  }
});

module.exports = router;
